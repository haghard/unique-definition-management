include "mysql.conf"

akka.http.server.preview.enable-http2 = on

akka {
  loglevel = DEBUG
  # Optimization: If an event would not be logged by slf4j, it will not be sent to the logging event bus.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  # Only use the slf4j logging, do not log directly to console.
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  stdout-loglevel = OFF
  logger-startup-timeout = 60s

  log-dead-letters = 10
  log-dead-letters-during-shutdown = false


  actor {
    allow-java-serialization = off
    warn-about-java-serializer-usage = on

    provider = akka.cluster.ClusterActorRefProvider

    serializers {
      #akka-replicated-data  = "akka.cluster.ddata.protobuf.ReplicatedDataSerializer"
      akka-replicated-data  = "akka.cluster.ddata.CRDTSerializer"

      #akka-data-replication = "akka.cluster.ddata.protobuf.ReplicatorMessageSerializer"
      akka-data-replication = "akka.cluster.ddata.CustomReplicatorMessageSerializerUdp"


      #akka-sharding = "akka.cluster.sharding.protobuf.ClusterShardingMessageSerializer"
      akka-sharding = "akka.cluster.sharding.CustomClusterShardingMessageSerializer"

      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-identifiers {
      #"akka.cluster.ddata.protobuf.ReplicatorMessageSerializer" = 11
      "akka.cluster.ddata.CRDTSerializer" = 11

      "akka.cluster.ddata.CustomReplicatorMessageSerializerUdp" = 12

      #"akka.cluster.sharding.protobuf.ClusterShardingMessageSerializer" = 13
      "akka.cluster.sharding.CustomClusterShardingMessageSerializer" = 13
    }

    serialization-bindings {
      "scalapb.GeneratedMessage" = proto
      #"com.google.protobuf.Message" = proto
    }
    
    default-dispatcher {
      fork-join-executor {
        parallelism-min = 2
        parallelism-factor = 1.0
        parallelism-max = 6
      }
    }

    # Default separate internal dispatcher to run Akka internal tasks and actors on
    # protecting them against starvation because of accidental blocking in user actors (which run on the
    # default dispatcher)
    internal-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 2
        parallelism-factor = 1.0
        parallelism-max = 4
      }
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    sharding {

      #ShardCoordinator State - the Shard locations. This is stored in the State Store.
      state-store-mode = ddata


      #number-of-shards = 32 #ShardCoordinator.Internal.State: 3_035 bts
      number-of-shards = 64 #a.c.s.ShardCoordinator.Internal.State:[shards:63/regions:2, 6121 bts]
      #number-of-shards = 128 #ShardCoordinator.Internal.State: 11_849 bts
      #1000

      passivation {
        default-idle-strategy.idle-entity.timeout = 25s #120
      }

      #https://doc.akka.io/docs/akka/current/typed/cluster-sharding.html?_ga=2.225099034.1493026331.1653164470-1899964194.1652800389#automatic-passivation
      #passivation {
      #  strategy = default-strategy
      #  default-strategy {
      #    active-entity-limit = 1000
      #    idle-entity.timeout = 5 m  # 20 s
      #  }
      #}
    }

    # akka://.../system/DDataStateActor
    distributed-data = {
      name = DDataStateActor
    }
  }

  # CoordinatedShutdown will run the tasks that are added to these
  # phases. The phases can be ordered as a DAG by defining the
  # dependencies between the phases.
  # Each phase is defined as a named config section with the
  # following optional properties:
  # - timeout=15s: Override the default-phase-timeout for this phase.
  # - recover=off: If the phase fails the shutdown is aborted
  #                and depending phases will not be executed.
  # depends-on=[]: Run the phase after the given phases
  coordinated-shutdown {

    phases {
      cluster-sharding-shutdown-region {
        timeout = 15 s  #10 s
        depends-on = [before-cluster-shutdown]
      }
    }

    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.
    exit-jvm = on
    default-phase-timeout = 10 seconds
  }

  //https://doc.akka.io/docs/akka-management/current/akka-management.html
  management {
    http {
      base-path = "definitions"
      route-providers-read-only = true
    }

    cluster.bootstrap {
      # Cluster Bootstrap will always attempt to join an existing cluster if possible. However
      # if no contact point advertises any seed-nodes a new cluster will be formed by the
      # node with the lowest address as decided by [[LowestAddressJoinDecider]].
      # Setting `new-cluster-enabled=off` after an initial cluster has formed is recommended to prevent new clusters
      # forming during a network partition when nodes are redeployed or restarted.
      # Replaces `form-new-cluster`, if `form-new-cluster` is set it takes precedence over this
      # property for backward compatibility
      new-cluster-enabled = on

      contact-point-discovery {

        service-name = unique-definition-management

        discovery-method = config

        port-name = akka.management.http.port #management

        # Interval at which service discovery will be polled in search for new contact-points
        interval = 1 second

        # The smallest number of contact points that need to be discovered before the bootstrap process can start.
        # For optimal safety during cluster formation, you may want to set these value to the number of initial
        # nodes that you know will participate in the cluster (e.g. the value of `spec.replicas` as set in your kubernetes config).
        required-contact-point-nr = 2

        # Amount of time for which a discovery observation must remain "stable"
        # (i.e. not change list of discovered contact-points) before a join decision can be made.
        # This is done to decrease the likelyhood of performing decisions on fluctuating observations.
        #
        # This timeout represents a tradeoff between safety and quickness of forming a new cluster.
        stable-margin = 3 seconds #5 seconds

        # Timeout for getting a reply from the service-discovery subsystem
        resolve-timeout = 3 seconds
      }
    }

    health-checks {
      readiness-path = "health/ready"
      liveness-path = "health/alive"
    }
  }



  remote {
    # Disable event logging
    log-remote-lifecycle-events = off
    artery {
      # Select the underlying transport implementation.
      # Possible values: aeron-udp, tcp, tls-tcp
      # See https://doc.akka.io/docs/akka/current/remoting-artery.html#selecting-a-transport for the tradeoffs
      # for each transport

      #https://doc.akka.io/docs/akka/current/remoting-artery.html#selecting-a-transport
      transport = aeron-udp
      #transport = tcp

      # To notice large messages you can enable logging of message types with payload size in bytes larger than the configured
      log-frame-size-exceeding = 250 KiB

      advanced {
        # Maximum serialized message size, including header data.
        maximum-frame-size = 256 KiB #512 KiB

        # Direct byte buffers are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-frame-size'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        buffer-pool-size = 128

        # Maximum serialized message size for the large messages, including header data.
        # It is currently restricted to 1/8th the size of a term buffer that can be
        # configured by setting the 'aeron.term.buffer.length' system property.
        # See 'large-message-destinations'.
        maximum-large-frame-size = 2 MiB

        # Direct byte buffers for the large messages are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-large-frame-size'.
        # See 'large-message-destinations'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        large-buffer-pool-size = 32


        # Total number of inbound lanes, shared among all inbound associations. A value
        # greater than 1 means that deserialization can be performed in parallel for
        # different destination actors. The selection of lane is based on consistent
        # hashing of the recipient ActorRef to preserve message ordering per receiver.
        # Lowest latency can be achieved with inbound-lanes=1 because of one less
        # asynchronous boundary.
        inbound-lanes = 4

        # Number of outbound lanes for each outbound association. A value greater than 1
        # means that serialization and other work can be performed in parallel for different
        # destination actors. The selection of lane is based on consistent hashing of the
        # recipient ActorRef to preserve message ordering per receiver. Note that messages
        # for different destination systems (hosts) are handled by different streams also
        # when outbound-lanes=1. Lowest latency can be achieved with outbound-lanes=1
        # because of one less asynchronous boundary.
        outbound-lanes = 1


        # Only used when transport is aeron-udp
        aeron {

          # Periodically log out all Aeron counters. See https://github.com/real-logic/aeron/wiki/Monitoring-and-Debugging#counters
          # Only used when transport is aeron-udp.
          log-aeron-counters = false

          # Controls whether to start the Aeron media driver in the same JVM or use external
          # process. Set to 'off' when using external media driver, and then also set the
          # 'aeron-dir'.
          # Only used when transport is aeron-udp.
          embedded-media-driver = on

          # Directory used by the Aeron media driver. It's mandatory to define the 'aeron-dir'
          # if using external media driver, i.e. when 'embedded-media-driver = off'.
          # Embedded media driver will use a this directory, or a temporary directory if this
          # property is not defined (empty).
          # Only used when transport is aeron-udp.
          #aeron-dir = ""

          # Whether to delete aeron embedded driver directory upon driver stop.
          # Only used when transport is aeron-udp.
          delete-aeron-dir = yes

          # Level of CPU time used, on a scale between 1 and 10, during backoff/idle.
          # The tradeoff is that to have low latency more CPU time must be used to be
          # able to react quickly on incoming messages or send as fast as possible after
          # backoff backpressure.
          # Level 1 strongly prefer low CPU consumption over low latency.
          # Level 10 strongly prefer low latency over low CPU consumption.
          # Only used when transport is aeron-udp.
          idle-cpu-level = 1

          # messages that are not accepted by Aeron are dropped after retrying for this period
          # Only used when transport is aeron-udp.
          give-up-message-after = 60 seconds

          # Timeout after which aeron driver has not had keepalive messages
          # from a client before it considers the client dead.
          # Only used when transport is aeron-udp.
          client-liveness-timeout = 20 seconds

          # Timout after after which an uncommitted publication will be unblocked
          # Only used when transport is aeron-udp.
          publication-unblock-timeout = 40 seconds

          # Timeout for each the INACTIVE and LINGER stages an aeron image
          # will be retained for when it is no longer referenced.
          # This timeout must be less than the 'handshake-timeout'.
          # Only used when transport is aeron-udp.
          image-liveness-timeout = 10 seconds

          # Timeout after which the aeron driver is considered dead
          # if it does not update its C'n'C timestamp.
          # Only used when transport is aeron-udp.
          driver-timeout = 20 seconds
        }
      }
    }
  }
}


akka.projection {
  at-least-once {
    save-offset-after-envelopes = 100
    save-offset-after-duration = 250 ms
  }

  grouped {
    group-after-envelopes = 20
    group-after-duration = 500 ms
  }

  management {
    # timeout for the operations in ProjectionManagement
    operation-timeout = 10 s
    # timeout for individual management requests, they are retried in case of timeout until the operation-timeout
    ask-timeout = 3 s
  }
}

akka.projection.slick {

  # The Slick profile to use
  # set to one of:
  #  slick.jdbc.H2Profile$
  #  slick.jdbc.PostgresProfile$
  #  slick.jdbc.MySQLProfile$
  #  slick.jdbc.SQLServerProfile$
  #  slick.jdbc.OracleProfile$
  profile = ${akka-persistence-jdbc.shared-databases.slick.profile}

  # add here your Slick db settings
  db {
    url = ${akka-persistence-jdbc.shared-databases.slick.db.url}
    driver = ${akka-persistence-jdbc.shared-databases.slick.db.driver}
    user = ${akka-persistence-jdbc.shared-databases.slick.db.user}
    password = ${akka-persistence-jdbc.shared-databases.slick.db.password}
    connectionPool = disabled
    keepAliveConnection = true
  }

  offset-store {
    # set this to your database schema if applicable, empty by default
    schema = ""
    # the database table name for the offset store
    table = "akka_projection_offset_store"

    # the database table name for the projection manangement data
    management-table = "akka_projection_management"

    # Use lowercase table and column names.
    # This is mostly useful for H2 and Postgres databases. MySQL and SQL Server are case insensitive.
    # Oracle schema is case sensitive and is defined with uppercase, this property is therefore ignore when using Oracle
    use-lowercase-schema = true
  }
}